{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "63c8bfa5-289b-4d8b-b8f5-6e8908fd1ac2",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // INPUT: {\n      //   type: 'create_and_syndicate_data:Qmdsfkjsl..',\n      //   data: {\n      //     sharedNode: Node,\n      //     permissionsNode: Node\n      //     syndicateToNode: Node\n      //   }\n      // }\n    \n      let {\n        sharedNode,\n        permissionsNode,\n        syndicateToNode\n      } = INPUT.data;\n    \n      \n      universe.console.log('Starting create_and_syndicate');\n      \n      // Check author matches myself (private_identity) \n      // - also used for getting our own identity \n      // - TODO \n      let MyPrivateIdentity = await universe.capabilities().privateIdentity();\n      // let myPublicKey = MyPrivateIdentity.data.public;\n      // let newChallenge = universe.uuidv4();\n      \n      // Create new temp_shared_node \n      // - get _id of new Node (used in signature) \n      let tmpNodeData = {\n        //nodeId:  // root level? TODO: find put in correct folder? \n        name: universe.uuidv4(),\n        type: \"tmp_shared_node:Qmsdfkj\",\n        data: {\n        }\n      }\n      let savedTmpNode = await universe.newNode(tmpNodeData);\n      \n      console.log('savedTmpNode:', savedTmpNode, savedTmpNode._id);\n      \n      // sourceId is the path back to the node \n      // - \"type:location\" i.e. \"idtestid:sub@nick:internalIdhere\"\n      // - depends on the identity (public/private,etc.) \n      let sourceType;\n      switch(MyPrivateIdentity.data.identity.split(':')[0]){\n        case 'id':\n          sourceType = 'idid'; // normal public identity, normal internal id, the \"ideal\" situation \n          break;\n        case 'idtest':\n          sourceType = 'idtestid';\n          break;\n        default:\n          // unexpected! \n          console.error('Invalid ID type!, missing id or idtest of MyPrivateNode.data.identity');\n          return false;\n          break;\n      }\n      let sourceId = [sourceType,':',MyPrivateIdentity.data.identity,':', savedTmpNode._id].join('')\n      let sharedNodeData = {\n        _id: sourceId, // GLOBAL id (\"type\":\"address\"), \"idtestid:sub@nick:internalId\" \n        type: sharedNode.type,\n        data: sharedNode.data,\n        signer: MyPrivateIdentity.data.identity // \"idtest:nick\"\n      }\n      \n      // Sign stringify({_id, type, data})\n      let stringToSign = JSON.stringify(sharedNodeData);\n      let SignedNode = await universe.loadAndRunCapability('rsa',{},{\n        type: 'standard_capability_action:0.0.1:local:298j291bs',\n        data: {\n          action: 'sign',\n          options: {\n            stringToSign\n          }\n        }\n      });\n      \n      let result = SignedNode.data; // base64-encoded string signature \n      \n      // Add signature to shared_node.data.signature \n      sharedNodeData.sig = result; // base64-encoded string \n      \n      // Add permissions node \n      // - TODO (just copy uploaded permissionsNode?) \n      \n      // Update type to shared_node \n      // - update entire node locally \n      savedTmpNode.type = 'shared_node:Qmsdfjsdlfsj'; // not \"tmp_shared_node\" anymore \n      savedTmpNode.data = sharedNodeData;\n      savedTmpNode = await universe.updateNode(savedTmpNode);\n      \n      \n      // Run syndicateTo (\"push\" sharing) \n      // - TODO \n      // - could have defaults here? \n      // - passed-in idenitities to push to (\"idtest:x@y\") \n      \n      \n      \n      universe.console.log('Returning create_and_syndicate');\n      \n      return resolve(savedTmpNode);\n      \n      \n      \n    }catch(err){\n      console.error('FAILED create_and_syndicate',err);\n      \n      return resolve({\n        // savedNode\n        type: 'error:..',\n        data: {\n          msg: 'Failed create_and_syndicate',\n          INPUT,\n          error: true,\n          err: err\n        }\n      });\n      // resolve({ERROR: true, err: err});\n    }\n    \n    \n  })\n})()"
  }
}